<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyTookExam" xml:space="preserve">
    <value>You already took this exam! Do you want to retake it?</value>
  </data>
  <data name="BestAnswered" xml:space="preserve">
    <value>Best answered question</value>
  </data>
  <data name="ChooseOption" xml:space="preserve">
    <value>Choose option</value>
  </data>
  <data name="CorrectAnswer" xml:space="preserve">
    <value>Correct answer is number #</value>
  </data>
  <data name="CorrectAnswer2" xml:space="preserve">
    <value>The second correct answer is number #</value>
  </data>
  <data name="CorrectAnswerMustBe" xml:space="preserve">
    <value>The correct answer must be between 1 and {0} !</value>
  </data>
  <data name="CorrectFillInAnswer" xml:space="preserve">
    <value>Correct fill-in answer</value>
  </data>
  <data name="EnterStudentKey" xml:space="preserve">
    <value>Enter your exam entry key</value>
  </data>
  <data name="EnterYourAnswer" xml:space="preserve">
    <value>Enter your answer</value>
  </data>
  <data name="ExamAdded" xml:space="preserve">
    <value>Exam successfully created!</value>
  </data>
  <data name="ExamExists" xml:space="preserve">
    <value>An exam under this key already exists!</value>
  </data>
  <data name="ExamKey" xml:space="preserve">
    <value>Exam key</value>
  </data>
  <data name="ExamNoB" xml:space="preserve">
    <value>You first have to create an Exam B with the same key!</value>
  </data>
  <data name="FailedExam" xml:space="preserve">
    <value>Sorry! You failed the exam because you've selected the wrong answer twice in a row.</value>
  </data>
  <data name="FailedExamDetails" xml:space="preserve">
    <value>Sorry! You failed the exam. Do you want to see the detailed results?</value>
  </data>
  <data name="FirstTakeB" xml:space="preserve">
    <value>You first have to pass type B exam to take this one!</value>
  </data>
  <data name="GivenAnswer" xml:space="preserve">
    <value>Given answer #</value>
  </data>
  <data name="LessThan26" xml:space="preserve">
    <value>You have to be younger than 26 in order to take this exam!</value>
  </data>
  <data name="MenuBack" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="MenuExit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="MenuNoteChooseSubinterface" xml:space="preserve">
    <value>Choose either the Professor or the Student interface:</value>
  </data>
  <data name="MenuOptionCreateNewExamA" xml:space="preserve">
    <value>Create new exam type A</value>
  </data>
  <data name="MenuOptionCreateNewExamB" xml:space="preserve">
    <value>Create new exam type B</value>
  </data>
  <data name="MenuOptionLoadData" xml:space="preserve">
    <value>Load exam and student data from saved file</value>
  </data>
  <data name="MenuOptionProfessor" xml:space="preserve">
    <value>Professor</value>
  </data>
  <data name="MenuOptionSaveData" xml:space="preserve">
    <value>Save exam and student data to file</value>
  </data>
  <data name="MenuOptionStudent" xml:space="preserve">
    <value>Student</value>
  </data>
  <data name="MenuOptionStudentList" xml:space="preserve">
    <value>Student list</value>
  </data>
  <data name="MenuOptionTakeExams" xml:space="preserve">
    <value>Take an exam</value>
  </data>
  <data name="MenuOptionViewExamQuestions" xml:space="preserve">
    <value>View exam questions</value>
  </data>
  <data name="MenuOptionViewExamResults" xml:space="preserve">
    <value>View exam results</value>
  </data>
  <data name="MenuOptionViewExams" xml:space="preserve">
    <value>View exam list</value>
  </data>
  <data name="MenuOptionViewGlobalStats" xml:space="preserve">
    <value>View stats</value>
  </data>
  <data name="MenuOptionViewStudentExams" xml:space="preserve">
    <value>View my exams</value>
  </data>
  <data name="NoEntryKey" xml:space="preserve">
    <value>If you don't have an entry key, just type anything.</value>
  </data>
  <data name="NoInputError" xml:space="preserve">
    <value>You haven't entered anything! Please try again.</value>
  </data>
  <data name="NoOneTookExam" xml:space="preserve">
    <value>No one took this exam</value>
  </data>
  <data name="NoSuchKey" xml:space="preserve">
    <value>No student with that key is registered</value>
  </data>
  <data name="NotADate" xml:space="preserve">
    <value>Incorrect date format!</value>
  </data>
  <data name="NotANumberOrNotValidated" xml:space="preserve">
    <value>You haven't entered a number or it doesn't satisfy certain parameters!</value>
  </data>
  <data name="NotAStringOrNotValidated" xml:space="preserve">
    <value>You haven't entered a string or it doesn't satisfy certain parameters!</value>
  </data>
  <data name="NotPassedWord" xml:space="preserve">
    <value>Not passed</value>
  </data>
  <data name="PassedExam" xml:space="preserve">
    <value>Congratulations! You passed the exam. Do you want to see the detailed results?</value>
  </data>
  <data name="PassedWithN" xml:space="preserve">
    <value>Passed with {0} correct answers</value>
  </data>
  <data name="PassedWord" xml:space="preserve">
    <value>Passed</value>
  </data>
  <data name="PercentagePerYear" xml:space="preserve">
    <value>Study years' percentage in total passed exams</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>Question #</value>
  </data>
  <data name="QuestionNotValidated" xml:space="preserve">
    <value>The question is either longer than 10 words or there's a similar question already!</value>
  </data>
  <data name="QuestionNotValidatedA" xml:space="preserve">
    <value>The question is either longer than 10 words, or there's a similar question - or there's a same question in exam type B!</value>
  </data>
  <data name="StudentBirthday" xml:space="preserve">
    <value>Date of birth (dd.mm.yyyy format)</value>
  </data>
  <data name="StudentCreated" xml:space="preserve">
    <value>Successfully registered. Your key is {0}. Please write it down somewhere!</value>
  </data>
  <data name="StudentFaculty" xml:space="preserve">
    <value>Name of faculty</value>
  </data>
  <data name="StudentFirstName" xml:space="preserve">
    <value>First name</value>
  </data>
  <data name="StudentLastName" xml:space="preserve">
    <value>Last name</value>
  </data>
  <data name="StudentStudyYear" xml:space="preserve">
    <value>Year of study</value>
  </data>
  <data name="TotalPassed" xml:space="preserve">
    <value>Total passed</value>
  </data>
  <data name="WantToRegister" xml:space="preserve">
    <value>That exam entry key does not exist. Do you want to register as a new student in order to get the entry key?</value>
  </data>
  <data name="WorstAnswered" xml:space="preserve">
    <value>Worst answered question</value>
  </data>
  <data name="YearWord" xml:space="preserve">
    <value>year</value>
  </data>
</root>